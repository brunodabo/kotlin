/*
 * Copyright 2010-2014 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.repl;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.repl.AbstractReplInterpreterTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/repl")
public class ReplInterpreterTestGenerated extends AbstractReplInterpreterTest {
    public void testAllFilesPresentInRepl() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.TestsPackage", new File("compiler/testData/repl"), Pattern.compile("^(.+)\\.repl$"), true);
    }
    
    @TestMetadata("analyzeErrors.repl")
    public void testAnalyzeErrors() throws Exception {
        doTest("compiler/testData/repl/analyzeErrors.repl");
    }
    
    @TestMetadata("constants.repl")
    public void testConstants() throws Exception {
        doTest("compiler/testData/repl/constants.repl");
    }
    
    @TestMetadata("empty.repl")
    public void testEmpty() throws Exception {
        doTest("compiler/testData/repl/empty.repl");
    }
    
    @TestMetadata("evaluationErrors.repl")
    public void testEvaluationErrors() throws Exception {
        doTest("compiler/testData/repl/evaluationErrors.repl");
    }
    
    @TestMetadata("function.repl")
    public void testFunction() throws Exception {
        doTest("compiler/testData/repl/function.repl");
    }
    
    @TestMetadata("functionOverloadResolution.repl")
    public void testFunctionOverloadResolution() throws Exception {
        doTest("compiler/testData/repl/functionOverloadResolution.repl");
    }
    
    @TestMetadata("functionOverloadResolutionAnyBeatsString.repl")
    public void testFunctionOverloadResolutionAnyBeatsString() throws Exception {
        doTest("compiler/testData/repl/functionOverloadResolutionAnyBeatsString.repl");
    }
    
    @TestMetadata("functionReferencesPrev.repl")
    public void testFunctionReferencesPrev() throws Exception {
        doTest("compiler/testData/repl/functionReferencesPrev.repl");
    }
    
    @TestMetadata("imports.repl")
    public void testImports() throws Exception {
        doTest("compiler/testData/repl/imports.repl");
    }
    
    @TestMetadata("multiline.repl")
    public void testMultiline() throws Exception {
        doTest("compiler/testData/repl/multiline.repl");
    }
    
    @TestMetadata("multiline3.repl")
    public void testMultiline3() throws Exception {
        doTest("compiler/testData/repl/multiline3.repl");
    }
    
    @TestMetadata("simple.repl")
    public void testSimple() throws Exception {
        doTest("compiler/testData/repl/simple.repl");
    }
    
    @TestMetadata("syntaxErrors.repl")
    public void testSyntaxErrors() throws Exception {
        doTest("compiler/testData/repl/syntaxErrors.repl");
    }
    
    @TestMetadata("twoClosures.repl")
    public void testTwoClosures() throws Exception {
        doTest("compiler/testData/repl/twoClosures.repl");
    }
    
}
